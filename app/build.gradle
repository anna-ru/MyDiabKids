apply plugin: 'com.android.application'
apply plugin: "androidx.navigation.safeargs"

def keystorePropertiesFile = rootProject.file("keystore.properties")

android {
    signingConfigs {
        release {
            if(keystorePropertiesFile.exists()){
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                storeFile file(keystoreProperties['releaseKeyStore'])
                storePassword keystoreProperties['releaseStorePassword']
                keyAlias keystoreProperties['releaseKeyAlias']
                keyPassword keystoreProperties['releaseKeyPassword']
            }
        }
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        // Flag to enable support for the new language APIs
        //coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.example.mydiabkids"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "influxdb_ip", "\"" + getInfluxDBIP() + "\"")
        buildConfigField("String", "grafana_ip", "\"" + getGrafanaIP() + "\"")
        buildConfigField("String", "token", "\"" + getToken() + "\"")
        buildConfigField("String", "bucket", "\"" + getBucket() + "\"")
        buildConfigField("String", "org", "\"" + getOrg() + "\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if(keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.1'
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    def nav_version = "2.3.2"

    // Java language implementation
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"

    // Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.thoughtbot:expandablerecyclerview:1.4'
    implementation 'com.thoughtbot:expandablecheckrecyclerview:1.4'

    implementation 'com.google.code.gson:gson:2.8.6'

    def roomVersion = '2.2.5'
    def archLifecycleVersion = '2.2.0'
    def coreTestingVersion = '2.1.0'
    def materialVersion = '1.2.1'

    // Room components
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"

// Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleVersion"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$archLifecycleVersion"

// UI
    implementation "com.google.android.material:material:$materialVersion"

// Testing
    androidTestImplementation "androidx.arch.core:core-testing:$coreTestingVersion"

    //InfluxDB
    implementation "com.influxdb:influxdb-client-java:1.14.0"
    implementation 'com.squareup.okhttp3:okhttp:4.7.2'
    implementation 'org.conscrypt:conscrypt-android:2.2.1'
}

def getInfluxDBIP() {
    def influxdb_ip = System.getenv("influxdb_ip")
    if (influxdb_ip == null || influxdb_ip.length() == 0) {
        def apikeyPropertiesFile = rootProject.file("apikey.properties")
        def apikeyProperties = new Properties()
        apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))
        influxdb_ip = apikeyProperties['influxdb_ip']
        if (influxdb_ip == null) {
            logger.error("You need to either place appropriate keys.properties or set proper environment variables for API key")
        }
    }
    return influxdb_ip
}

def getGrafanaIP() {
    def grafana_ip = System.getenv("grafana_ip")
    if (grafana_ip == null || grafana_ip.length() == 0) {
        def apikeyPropertiesFile = rootProject.file("apikey.properties")
        def apikeyProperties = new Properties()
        apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))
        grafana_ip = apikeyProperties['grafana_ip']
        if (grafana_ip == null) {
            logger.error("You need to either place appropriate keys.properties or set proper environment variables for API key")
        }
    }
    return grafana_ip
}

def getToken() {
    def token = System.getenv("token")
    if (token == null || token.length() == 0) {
        def apikeyPropertiesFile = rootProject.file("apikey.properties")
        def apikeyProperties = new Properties()
        apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))
        token = apikeyProperties['token']
        if (token == null) {
            logger.error("You need to either place appropriate keys.properties or set proper environment variables for API key")
        }
    }
    return token
}

def getBucket() {
    def bucket = System.getenv("bucket")
    if (bucket == null || bucket.length() == 0) {
        def apikeyPropertiesFile = rootProject.file("apikey.properties")
        def apikeyProperties = new Properties()
        apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))
        bucket = apikeyProperties['bucket']
        if (bucket == null) {
            logger.error("You need to either place appropriate keys.properties or set proper environment variables for API key")
        }
    }
    return bucket
}

def getOrg() {
    def org = System.getenv("org")
    if (org == null || org.length() == 0) {
        def apikeyPropertiesFile = rootProject.file("apikey.properties")
        def apikeyProperties = new Properties()
        apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))
        org = apikeyProperties['org']
        if (org == null) {
            logger.error("You need to either place appropriate keys.properties or set proper environment variables for API key")
        }
    }
    return org
}